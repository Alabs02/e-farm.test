contract FarmRecords =

  record slip =
    { creatorAddress: address,
      name          : string,
      farmName      : string,
      gender        : string,
      hectares      : string,
      purchase      : int,
      labour        : int,
      equipment     : int,
      crop          : int,
      livestock     : int,
      profits       : int,
      loss          : int,
      total         : int}
      
  record state = {
    slips: map(int, slip),
    slipsLength: int }
    
  entrypoint init() = { slips = {}, slipsLength = 0 }
  
  // Error handling for wrong index
  entrypoint getSlip(index : int) : slip = 
    switch(Map.lookup(index, state.slips))
      None => abort("There is no farm record that exixt with this index!!!")
      Some(x) => x

   // save records to the blockchain 
  stateful entrypoint recordSlip(  _name: string, _farm: string, _sex: string, _hectare: string) =
    let slip = {creatorAddress = Call.caller, name = _name, farmName = _farm, gender = _sex, hectares = _hectare, purchase = 0, labour = 0, equipment = 0, crop = 0, livestock = 0, profits = 0, loss = 0,   total = 0}
    let index = getSlipsLength() + 1
    put(state{ slips[index] = slip, slipsLength = index })

  // Keep counts of record slips
  entrypoint getSlipsLength() : int =
    state.slipsLength

  // To calculate the total cost
  stateful entrypoint getTotalSum(sum: int) : int = 
    let sum = labour + equipment + loss
    let updatedTotal = sum
    put(state{ total = updatedTotal })
  

  //address, string, string, string, string, int,int,int,int,int,int,int,int